{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1532408678808},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1532408678810},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1532408678812},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1532408678811},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1532408678814},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1532408678812},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1532408678815},{"_id":"themes/yilia/_config.yml","hash":"5af38d2a26fdd3cdbc4cd3cbe953d1dbcc35b940","modified":1532420622458},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1532408678855},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1532408678936},{"_id":"source/_posts/contains.md","hash":"ceb036df85535ec89609b40084e565a667f6354d","modified":1532420862641},{"_id":"source/_posts/vue_learn(1).md","hash":"cad3114c4a4e4e49f55591f090dc2c2c21fca367","modified":1532397920000},{"_id":"source/_posts/vue_learn(2).md","hash":"7f23b73a75dd2cd6abe021aec4c95e48240dc7d7","modified":1532463860000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1532408678728},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532408365952},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1532408678749},{"_id":"themes/yilia/.git/index","hash":"e50081e7de96e5d60c481e47ad64387b0bf01287","modified":1532491646165},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1532408678717},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1532408678817},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1532408678818},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1532408678819},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1532408678820},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1532408678820},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1532408678821},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1532408678822},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1532408678850},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1532408678852},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1532408678851},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1532408678852},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1532408678853},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1532408678854},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1532408678854},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"9887ec63008cabe2896a5c1f17e1dcef0c067e43","modified":1532420460893},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1532408678935},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1532408678856},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1532408678916},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532408678847},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1532408678930},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1532408678933},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532408365956},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532408365973},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1532408365978},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532408365982},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532408365986},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532408366004},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1532408366019},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532408366011},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532408366023},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1532408366027},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532408366057},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532408366063},{"_id":"themes/yilia/.git/logs/HEAD","hash":"2212979a36b6389bae072f9c4d2e420728aaf99c","modified":1532408678738},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1532408678823},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1532408678824},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1532408678824},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1532408678825},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1532408678826},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1532408678827},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1532408678827},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"a80e32a0b518c7a12deaad80af65e5598958304a","modified":1532421039183},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1532408678830},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1532408678829},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1532408678831},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1532408678832},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1532408678833},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1532408678834},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1532408678848},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1532408678849},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1532408678918},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1532408678919},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1532408678922},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1532408678920},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1532408678921},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1532408678923},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1532408678924},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1532408678925},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1532408678926},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1532408678857},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1532408678858},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1532408678859},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1532408678861},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1532408678862},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1532408678860},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1532408678860},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1532408678863},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1532408678864},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1532408678870},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1532408678876},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1532408678878},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1532408678879},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1532408678880},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1532408678885},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1532408678885},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1532408678886},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1532408678887},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1532408678888},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1532408678889},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1532408678890},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1532408678890},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1532408678891},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1532408678892},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1532408678893},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1532408678894},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1532408678898},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1532408678900},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1532408678902},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1532408678901},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1532408678903},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1532408678905},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1532408678904},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1532408678910},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1532408678909},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1532408678911},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1532408678912},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1532408678914},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1532408678916},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1532408678847},{"_id":"themes/yilia/.git/objects/pack/pack-4ea115ea551bddb7dfbba8549e99744c338c11f5.idx","hash":"fa67089ee1ad846ff7249deebdea253cb0b37339","modified":1532408678489},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1532408678737},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1532408678835},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1532408678836},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1532408678836},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1532408678837},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1532408678838},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1532408678839},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1532408678840},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1532408678841},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1532408678842},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1532408678844},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1532408678866},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1532408678867},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1532408678868},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1532408678869},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1532408678869},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1532408678873},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1532408678871},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1532408678872},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1532408678875},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1532408678882},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1532408678883},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1532408678884},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"2212979a36b6389bae072f9c4d2e420728aaf99c","modified":1532408678739},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1532408678727},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"2212979a36b6389bae072f9c4d2e420728aaf99c","modified":1532408678726},{"_id":"themes/yilia/.git/objects/pack/pack-4ea115ea551bddb7dfbba8549e99744c338c11f5.pack","hash":"73e65d3196952cb93c5f99df243f4ac69f85c5e7","modified":1532408678524},{"_id":"public/content.json","hash":"a8b5c618ea66e0575f266207f7c1cdc1561d8a99","modified":1532492677784},{"_id":"public/2018/07/24/vue_learn(1)/index.html","hash":"129d2434f3d9e8d6df06cc488516170404817714","modified":1532492677833},{"_id":"public/2018/07/24/contains/index.html","hash":"3d50fd6d6af852566e7d1596563a4789dbb5bd6e","modified":1532492677845},{"_id":"public/archives/index.html","hash":"d370f8e245c9a50b98eaa0a2d7c32de25d66a47e","modified":1532492677846},{"_id":"public/archives/2018/index.html","hash":"f404e25e2cab82e54fe9b91f96297796d6b9c110","modified":1532492677847},{"_id":"public/archives/2018/07/index.html","hash":"2df0d371063ff11fda3fe8eed7a33d280d0d74e3","modified":1532492677847},{"_id":"public/index.html","hash":"ff6154532a5b542f4b12b61fa435452f202c54ec","modified":1532492677847},{"_id":"public/tags/JS-DOM/index.html","hash":"a65e78cf216ecebe46006bf2736ed984f7e15819","modified":1532492677847},{"_id":"public/tags/Vue/index.html","hash":"5603ed85e581a06e4ce4957426794e4b0498b6d6","modified":1532492677847},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1532492563269},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1532492563269},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1532492563269},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1532492563269},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1532492563269},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1532492563269},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1532492563269},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1532492563269},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1532492563269},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1532492563320},{"_id":"public/main.0cf68a.css","hash":"9887ec63008cabe2896a5c1f17e1dcef0c067e43","modified":1532492563329},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1532492563331},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1532492563384},{"_id":"public/tags/vue/index.html","hash":"bb3774aa3747088c3e3d57be3294d4b7111bcb15","modified":1532492677847},{"_id":"public/2018/07/25/vue_learn(2)/index.html","hash":"423b9e05093f25e8b6a3a02d2dc281ffda911fde","modified":1532492677848}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"js判断一个元素是不是另一个元素的子元素","grammar_cjkRuby":true,"_content":"\n\n   在做一些效果时，很经常会用到 ==这个元素是否在指定元素内 #03a9f4==，特别是在一些鼠标相关事件的应用中，例如，在做弹窗的时候，最常遇到的需求就是，点击弹窗外的部分弹窗需要收回。实现方式多种多想，下面是我学习到的一种方式：\n\n``` javascript\nfunction isInThis(target,parent){\n\t//首先要做空元素判断和是否为body\n\twhild ( target != undifinde &&obj != null && obj.tagName.toUpperCase() != 'BODY'){\n\t\t//判断当前点击对象是否是所指定的元素\n\t\tif ( target == parent ) {\n\t\t\t//判断成功返回true\n\t\t\treturn true;\n\t\t}\n\t\t//上述条件不满足将target重新赋值为其上一级\n\t\ttarget = target.parentNode;\n\t}\n\t//不满足所有返回false\n\treturn false;\n}\n```\n上述的方法是我说了解到的比较简单的而且没有任何兼容性问题的方法，下面描述第二种方法，就是js的contains方法，这个方法通常会用来判断一个字符串是否包含另外一个字符串，也可以用来判断元素间的包含关系。\n\t   \n\t   代码：\n``` javascript\nfunction isContains(target,parent){\n\t//containe方法会直接返回true或者false,用法为父元素.contains(子元素)\n\treturn parent.contains(target);\n}\n```\nFireFox除了支持Contains方法外，还支持compareDocumentPosition()这个方法，这是W3C制定的方法，标准浏览器都支持，但是由于实用性比较差，故而没什么人用，它返回的并不是简单的true和false，而是一串奇怪的数值，是通过下表的值计算出来的。\n\n| Bits   | Number | Meaning                              |\n| ------ | ------ | ------------------------------------ |\n| 000000 | 0      | 元素一致                             |\n| 000001 | 1      | 节点在不同的文档（或者一个在文档外） |\n| 000010 | 2      | 节点B在节点A之前                     |\n| 000100 | 4      | 节点A在节点B之前                     |\n| 001000 | 8      | 节点B包含节点A                       |\n| 010000 | 16     | 节点A包含节点B                       |\n| 100000 | 32     | 浏览器的私有使用                     |\n\n 对于我这种数学无能的人来说，计算永远都是痛。、\n下面我只能贴上我抄来的代码，其实我也不是很理解，仅作为学习参考。\n### HTML:\n``` html\n<div id=\"parent\" style=\" padding:10px; border:1px solid #DDD; background:#678789\">\n  <p>这里是父元素</p>\n  <p>\n    <strong id=\"child\" style=\" padding:10px; border:1px solid #DDD; background:#FE7878\">这个是子元素</strong>\n  </p>\n</div>\n```\n\n### JavaScript:\n\n``` javascript\n window.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.compareDocumentPosition(B));//B与A不相连，B在A的后面，B被A包含 4+16 = 20\n    alert(B.compareDocumentPosition(A));//A与B不相连，A在B的前面，A包含B 2+8 = 10\n}\n```\n上述就是我学习到的对元素位置的判断，希望能帮助到大家！","source":"_posts/contains.md","raw":"---\ntitle: js判断一个元素是不是另一个元素的子元素\ntags: JS,DOM\ngrammar_cjkRuby: true\n---\n\n\n   在做一些效果时，很经常会用到 ==这个元素是否在指定元素内 #03a9f4==，特别是在一些鼠标相关事件的应用中，例如，在做弹窗的时候，最常遇到的需求就是，点击弹窗外的部分弹窗需要收回。实现方式多种多想，下面是我学习到的一种方式：\n\n``` javascript\nfunction isInThis(target,parent){\n\t//首先要做空元素判断和是否为body\n\twhild ( target != undifinde &&obj != null && obj.tagName.toUpperCase() != 'BODY'){\n\t\t//判断当前点击对象是否是所指定的元素\n\t\tif ( target == parent ) {\n\t\t\t//判断成功返回true\n\t\t\treturn true;\n\t\t}\n\t\t//上述条件不满足将target重新赋值为其上一级\n\t\ttarget = target.parentNode;\n\t}\n\t//不满足所有返回false\n\treturn false;\n}\n```\n上述的方法是我说了解到的比较简单的而且没有任何兼容性问题的方法，下面描述第二种方法，就是js的contains方法，这个方法通常会用来判断一个字符串是否包含另外一个字符串，也可以用来判断元素间的包含关系。\n\t   \n\t   代码：\n``` javascript\nfunction isContains(target,parent){\n\t//containe方法会直接返回true或者false,用法为父元素.contains(子元素)\n\treturn parent.contains(target);\n}\n```\nFireFox除了支持Contains方法外，还支持compareDocumentPosition()这个方法，这是W3C制定的方法，标准浏览器都支持，但是由于实用性比较差，故而没什么人用，它返回的并不是简单的true和false，而是一串奇怪的数值，是通过下表的值计算出来的。\n\n| Bits   | Number | Meaning                              |\n| ------ | ------ | ------------------------------------ |\n| 000000 | 0      | 元素一致                             |\n| 000001 | 1      | 节点在不同的文档（或者一个在文档外） |\n| 000010 | 2      | 节点B在节点A之前                     |\n| 000100 | 4      | 节点A在节点B之前                     |\n| 001000 | 8      | 节点B包含节点A                       |\n| 010000 | 16     | 节点A包含节点B                       |\n| 100000 | 32     | 浏览器的私有使用                     |\n\n 对于我这种数学无能的人来说，计算永远都是痛。、\n下面我只能贴上我抄来的代码，其实我也不是很理解，仅作为学习参考。\n### HTML:\n``` html\n<div id=\"parent\" style=\" padding:10px; border:1px solid #DDD; background:#678789\">\n  <p>这里是父元素</p>\n  <p>\n    <strong id=\"child\" style=\" padding:10px; border:1px solid #DDD; background:#FE7878\">这个是子元素</strong>\n  </p>\n</div>\n```\n\n### JavaScript:\n\n``` javascript\n window.onload = function(){\n    var A = document.getElementById('parent'),\n    B = document.getElementById('child');\n    alert(A.compareDocumentPosition(B));//B与A不相连，B在A的后面，B被A包含 4+16 = 20\n    alert(B.compareDocumentPosition(A));//A与B不相连，A在B的前面，A包含B 2+8 = 10\n}\n```\n上述就是我学习到的对元素位置的判断，希望能帮助到大家！","slug":"contains","published":1,"date":"2018-07-24T08:09:21.716Z","updated":"2018-07-24T08:27:42.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0mi5gs0000agtz1pg1w4hc","content":"<p>   在做一些效果时，很经常会用到 ==这个元素是否在指定元素内 #03a9f4==，特别是在一些鼠标相关事件的应用中，例如，在做弹窗的时候，最常遇到的需求就是，点击弹窗外的部分弹窗需要收回。实现方式多种多想，下面是我学习到的一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInThis</span>(<span class=\"params\">target,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//首先要做空元素判断和是否为body</span></span><br><span class=\"line\">\twhild ( target != undifinde &amp;&amp;obj != <span class=\"literal\">null</span> &amp;&amp; obj.tagName.toUpperCase() != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前点击对象是否是所指定的元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( target == parent ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断成功返回true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//上述条件不满足将target重新赋值为其上一级</span></span><br><span class=\"line\">\t\ttarget = target.parentNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//不满足所有返回false</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的方法是我说了解到的比较简单的而且没有任何兼容性问题的方法，下面描述第二种方法，就是js的contains方法，这个方法通常会用来判断一个字符串是否包含另外一个字符串，也可以用来判断元素间的包含关系。</p>\n<pre><code>代码：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isContains</span>(<span class=\"params\">target,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//containe方法会直接返回true或者false,用法为父元素.contains(子元素)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> parent.contains(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FireFox除了支持Contains方法外，还支持compareDocumentPosition()这个方法，这是W3C制定的方法，标准浏览器都支持，但是由于实用性比较差，故而没什么人用，它返回的并不是简单的true和false，而是一串奇怪的数值，是通过下表的值计算出来的。</p>\n<table>\n<thead>\n<tr>\n<th>Bits</th>\n<th>Number</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>000000</td>\n<td>0</td>\n<td>元素一致</td>\n</tr>\n<tr>\n<td>000001</td>\n<td>1</td>\n<td>节点在不同的文档（或者一个在文档外）</td>\n</tr>\n<tr>\n<td>000010</td>\n<td>2</td>\n<td>节点B在节点A之前</td>\n</tr>\n<tr>\n<td>000100</td>\n<td>4</td>\n<td>节点A在节点B之前</td>\n</tr>\n<tr>\n<td>001000</td>\n<td>8</td>\n<td>节点B包含节点A</td>\n</tr>\n<tr>\n<td>010000</td>\n<td>16</td>\n<td>节点A包含节点B</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>32</td>\n<td>浏览器的私有使用</td>\n</tr>\n</tbody>\n</table>\n<p> 对于我这种数学无能的人来说，计算永远都是痛。、<br>下面我只能贴上我抄来的代码，其实我也不是很理解，仅作为学习参考。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\" padding:10px; border:1px solid #DDD; background:#678789\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是父元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\" padding:10px; border:1px solid #DDD; background:#FE7878\"</span>&gt;</span>这个是子元素<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript:\"></a>JavaScript:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent'</span>),</span><br><span class=\"line\">    B = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>);</span><br><span class=\"line\">    alert(A.compareDocumentPosition(B));<span class=\"comment\">//B与A不相连，B在A的后面，B被A包含 4+16 = 20</span></span><br><span class=\"line\">    alert(B.compareDocumentPosition(A));<span class=\"comment\">//A与B不相连，A在B的前面，A包含B 2+8 = 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述就是我学习到的对元素位置的判断，希望能帮助到大家！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>   在做一些效果时，很经常会用到 ==这个元素是否在指定元素内 #03a9f4==，特别是在一些鼠标相关事件的应用中，例如，在做弹窗的时候，最常遇到的需求就是，点击弹窗外的部分弹窗需要收回。实现方式多种多想，下面是我学习到的一种方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInThis</span>(<span class=\"params\">target,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//首先要做空元素判断和是否为body</span></span><br><span class=\"line\">\twhild ( target != undifinde &amp;&amp;obj != <span class=\"literal\">null</span> &amp;&amp; obj.tagName.toUpperCase() != <span class=\"string\">'BODY'</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前点击对象是否是所指定的元素</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( target == parent ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断成功返回true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//上述条件不满足将target重新赋值为其上一级</span></span><br><span class=\"line\">\t\ttarget = target.parentNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//不满足所有返回false</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的方法是我说了解到的比较简单的而且没有任何兼容性问题的方法，下面描述第二种方法，就是js的contains方法，这个方法通常会用来判断一个字符串是否包含另外一个字符串，也可以用来判断元素间的包含关系。</p>\n<pre><code>代码：\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isContains</span>(<span class=\"params\">target,parent</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//containe方法会直接返回true或者false,用法为父元素.contains(子元素)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> parent.contains(target);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FireFox除了支持Contains方法外，还支持compareDocumentPosition()这个方法，这是W3C制定的方法，标准浏览器都支持，但是由于实用性比较差，故而没什么人用，它返回的并不是简单的true和false，而是一串奇怪的数值，是通过下表的值计算出来的。</p>\n<table>\n<thead>\n<tr>\n<th>Bits</th>\n<th>Number</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>000000</td>\n<td>0</td>\n<td>元素一致</td>\n</tr>\n<tr>\n<td>000001</td>\n<td>1</td>\n<td>节点在不同的文档（或者一个在文档外）</td>\n</tr>\n<tr>\n<td>000010</td>\n<td>2</td>\n<td>节点B在节点A之前</td>\n</tr>\n<tr>\n<td>000100</td>\n<td>4</td>\n<td>节点A在节点B之前</td>\n</tr>\n<tr>\n<td>001000</td>\n<td>8</td>\n<td>节点B包含节点A</td>\n</tr>\n<tr>\n<td>010000</td>\n<td>16</td>\n<td>节点A包含节点B</td>\n</tr>\n<tr>\n<td>100000</td>\n<td>32</td>\n<td>浏览器的私有使用</td>\n</tr>\n</tbody>\n</table>\n<p> 对于我这种数学无能的人来说，计算永远都是痛。、<br>下面我只能贴上我抄来的代码，其实我也不是很理解，仅作为学习参考。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\" padding:10px; border:1px solid #DDD; background:#678789\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这里是父元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">id</span>=<span class=\"string\">\"child\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\" padding:10px; border:1px solid #DDD; background:#FE7878\"</span>&gt;</span>这个是子元素<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript:\"></a>JavaScript:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> A = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent'</span>),</span><br><span class=\"line\">    B = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'child'</span>);</span><br><span class=\"line\">    alert(A.compareDocumentPosition(B));<span class=\"comment\">//B与A不相连，B在A的后面，B被A包含 4+16 = 20</span></span><br><span class=\"line\">    alert(B.compareDocumentPosition(A));<span class=\"comment\">//A与B不相连，A在B的前面，A包含B 2+8 = 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述就是我学习到的对元素位置的判断，希望能帮助到大家！</p>\n"},{"title":"Vue基础学习笔记 （一）","grammar_cjkRuby":true,"_content":"\n\n# 一、介绍\nVue是一套用于构建用户界面的渐进式框架，说白了就是个很牛X的前端框架，谁用谁知道。\nVue的特点：\n\n - 是一个构建用户界面的框架\n - 是一个轻量级的MVVM框架，类似于Angular、react这样的\n - 是数据驱动和组件化的前端开发方式\n - 丰富简单的API实现响应式的数据绑定和组合的视图组件\n - 容易上手\n第一次接触的同学建议先去通读  [官方文档](https://cn.vuejs.org/) 。\n\n# 二、第一个实例\n\n``` html\n<div id=\"app\">\n  {{ message }}\n</div>\n<script src=\"./js/vue.js\"></script>   //引入vue文件\n<script>\n\tvar app = new Vue({\n\t\tel:\"#app\",\n\t\tdata:{\n\t\t\tmessae: \"Hello Vue!\"\n\t\t}\n\t});\n</script>\n```\n以上就是最简单的Vue应用，看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n每个Vue应用都是通过 ==Vue #dd146a== 函数创建一个新的 **Vue 实例** 开始的：\n\n``` js\nvar app = new Vue({ \n\t//选项\n});\n```\n==el #dd146a== 传入的是Vue实例的作用域，所有Vue的操作都需要在该作用域下才会起作用。\n==data #dd146a==  对象包含了一个Vue实例所有的属性。当属性的值被改变是，视图就会产生 “响应”，即匹配更新为新的值。\n\n### 实例生命周期钩子\n每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n\n``` js\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n```\n### ***==注意： #ea0617==***\n\n > 不要在选项属性或回调上使用箭头函数，\n > 比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。\n > 因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，经常导致 \n > Uncaught TypeError: Cannot read property of undefined 或\n > Uncaught TypeError: this.myMethod is not a function 之类的错误。\n \n ### 生命周期图示\n ![enter description here](https://cn.vuejs.org/images/lifecycle.png)\n 图中的方法并不需要立马了解清楚，在不断的学习使用后自然而然能掌握了。\n \n \n \n\n\n","source":"_posts/vue_learn(1).md","raw":"---\ntitle: Vue基础学习笔记 （一）\ntags: Vue\ngrammar_cjkRuby: true\n---\n\n\n# 一、介绍\nVue是一套用于构建用户界面的渐进式框架，说白了就是个很牛X的前端框架，谁用谁知道。\nVue的特点：\n\n - 是一个构建用户界面的框架\n - 是一个轻量级的MVVM框架，类似于Angular、react这样的\n - 是数据驱动和组件化的前端开发方式\n - 丰富简单的API实现响应式的数据绑定和组合的视图组件\n - 容易上手\n第一次接触的同学建议先去通读  [官方文档](https://cn.vuejs.org/) 。\n\n# 二、第一个实例\n\n``` html\n<div id=\"app\">\n  {{ message }}\n</div>\n<script src=\"./js/vue.js\"></script>   //引入vue文件\n<script>\n\tvar app = new Vue({\n\t\tel:\"#app\",\n\t\tdata:{\n\t\t\tmessae: \"Hello Vue!\"\n\t\t}\n\t});\n</script>\n```\n以上就是最简单的Vue应用，看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。\n每个Vue应用都是通过 ==Vue #dd146a== 函数创建一个新的 **Vue 实例** 开始的：\n\n``` js\nvar app = new Vue({ \n\t//选项\n});\n```\n==el #dd146a== 传入的是Vue实例的作用域，所有Vue的操作都需要在该作用域下才会起作用。\n==data #dd146a==  对象包含了一个Vue实例所有的属性。当属性的值被改变是，视图就会产生 “响应”，即匹配更新为新的值。\n\n### 实例生命周期钩子\n每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n\n``` js\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n```\n### ***==注意： #ea0617==***\n\n > 不要在选项属性或回调上使用箭头函数，\n > 比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。\n > 因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，经常导致 \n > Uncaught TypeError: Cannot read property of undefined 或\n > Uncaught TypeError: this.myMethod is not a function 之类的错误。\n \n ### 生命周期图示\n ![enter description here](https://cn.vuejs.org/images/lifecycle.png)\n 图中的方法并不需要立马了解清楚，在不断的学习使用后自然而然能掌握了。\n \n \n \n\n\n","slug":"vue_learn(1)","published":1,"date":"2018-07-24T10:05:48.843Z","updated":"2018-07-24T02:05:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0mi5gx0001agtzijvt7es1","content":"<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><p>Vue是一套用于构建用户界面的渐进式框架，说白了就是个很牛X的前端框架，谁用谁知道。<br>Vue的特点：</p>\n<ul>\n<li>是一个构建用户界面的框架</li>\n<li>是一个轻量级的MVVM框架，类似于Angular、react这样的</li>\n<li>是数据驱动和组件化的前端开发方式</li>\n<li>丰富简单的API实现响应式的数据绑定和组合的视图组件</li>\n<li>容易上手<br>第一次接触的同学建议先去通读  <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 。</li>\n</ul>\n<h1 id=\"二、第一个实例\"><a href=\"#二、第一个实例\" class=\"headerlink\" title=\"二、第一个实例\"></a>二、第一个实例</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   //引入vue文件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tel:<span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tmessae: <span class=\"string\">\"Hello Vue!\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上就是最简单的Vue应用，看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。<br>每个Vue应用都是通过 ==Vue #dd146a== 函数创建一个新的 <strong>Vue 实例</strong> 开始的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//选项</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>==el #dd146a== 传入的是Vue实例的作用域，所有Vue的操作都需要在该作用域下才会起作用。<br>==data #dd146a==  对象包含了一个Vue实例所有的属性。当属性的值被改变是，视图就会产生 “响应”，即匹配更新为新的值。</p>\n<h3 id=\"实例生命周期钩子\"><a href=\"#实例生命周期钩子\" class=\"headerlink\" title=\"实例生命周期钩子\"></a>实例生命周期钩子</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"a is: 1\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意：-ea0617\"><a href=\"#注意：-ea0617\" class=\"headerlink\" title=\"==注意： #ea0617==\"></a><strong><em>==注意： #ea0617==</em></strong></h3><blockquote>\n<p>不要在选项属性或回调上使用箭头函数，<br>比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。<br>因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，经常导致<br>Uncaught TypeError: Cannot read property of undefined 或<br>Uncaught TypeError: this.myMethod is not a function 之类的错误。</p>\n</blockquote>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p> <img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"enter description here\"><br> 图中的方法并不需要立马了解清楚，在不断的学习使用后自然而然能掌握了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><p>Vue是一套用于构建用户界面的渐进式框架，说白了就是个很牛X的前端框架，谁用谁知道。<br>Vue的特点：</p>\n<ul>\n<li>是一个构建用户界面的框架</li>\n<li>是一个轻量级的MVVM框架，类似于Angular、react这样的</li>\n<li>是数据驱动和组件化的前端开发方式</li>\n<li>丰富简单的API实现响应式的数据绑定和组合的视图组件</li>\n<li>容易上手<br>第一次接触的同学建议先去通读  <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a> 。</li>\n</ul>\n<h1 id=\"二、第一个实例\"><a href=\"#二、第一个实例\" class=\"headerlink\" title=\"二、第一个实例\"></a>二、第一个实例</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   //引入vue文件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tel:<span class=\"string\">\"#app\"</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">\t\tdata:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tmessae: <span class=\"string\">\"Hello Vue!\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上就是最简单的Vue应用，看起来这跟渲染一个字符串模板非常类似，但是 Vue 在背后做了大量工作。现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的 JavaScript 控制台 (就在这个页面打开)，并修改 app.message 的值，你将看到上例相应地更新。<br>每个Vue应用都是通过 ==Vue #dd146a== 函数创建一个新的 <strong>Vue 实例</strong> 开始的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123; </span><br><span class=\"line\">\t<span class=\"comment\">//选项</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>==el #dd146a== 传入的是Vue实例的作用域，所有Vue的操作都需要在该作用域下才会起作用。<br>==data #dd146a==  对象包含了一个Vue实例所有的属性。当属性的值被改变是，视图就会产生 “响应”，即匹配更新为新的值。</p>\n<h3 id=\"实例生命周期钩子\"><a href=\"#实例生命周期钩子\" class=\"headerlink\" title=\"实例生命周期钩子\"></a>实例生命周期钩子</h3><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// `this` 指向 vm 实例</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a is: '</span> + <span class=\"keyword\">this</span>.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"a is: 1\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注意：-ea0617\"><a href=\"#注意：-ea0617\" class=\"headerlink\" title=\"==注意： #ea0617==\"></a><strong><em>==注意： #ea0617==</em></strong></h3><blockquote>\n<p>不要在选项属性或回调上使用箭头函数，<br>比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。<br>因为箭头函数是和父级上下文绑定在一起的，this 不会是如你所预期的 Vue 实例，经常导致<br>Uncaught TypeError: Cannot read property of undefined 或<br>Uncaught TypeError: this.myMethod is not a function 之类的错误。</p>\n</blockquote>\n<h3 id=\"生命周期图示\"><a href=\"#生命周期图示\" class=\"headerlink\" title=\"生命周期图示\"></a>生命周期图示</h3><p> <img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"enter description here\"><br> 图中的方法并不需要立马了解清楚，在不断的学习使用后自然而然能掌握了。</p>\n"},{"title":"Vue基础学习笔记 （二）","grammar_cjkRuby":true,"_content":"\n# Vue基础学习笔记 （二）— Vue模板语法\n## 一、插值\n### 文本\nVue中的数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值：\n``` html\n<span> Message: {{ msg }} </span>\n```\nMustache 标签将会被替代为对应数据对象上 ==msg #800000== 属性的值。无论何时，绑定的数据对象上 ==msg #800000== 属性发生了改变，插值处的内容都会更新。\n使用 ==v-once #800000== 指令，可以进行一次性插值，即当数据改变时，插值处也不会因此而更新为新值。\n除了双大括号形式可以进行数据绑定，==v-text #800000== 指令也可以进行数据的绑定\n``` html\n<span v-once> Message: {{ msg }} </span>\n```\n### 原始HTML\n双大括号和 v-text 指令的数据绑定方式都会把数据解析为普通文本，而非HTML代码，为了输出HTML代码，我们需要使用 ==v-html #800000== 指令：\n\n``` html\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n···\ndata：{\n\trawHtml:'<span style=\"color:red\">This should be red</span>'\n}\n```\nspan中的内容就会被替换成rawHtml中的内容。这时候页面就会显示一段红色This should be red的文本。\n### 特性\n==v-bind #800000==指令：\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n```\n是用于处理Mustache 语法不能作用在HTML特性上的情况，上述代码指在布尔特性下，它们的存在即暗示为 ==true #800000== , 在下面的例子中：\n\n``` html\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n如果 ==isButtonDisabled #800000== 的值是 ==null #800000==、==undefined #800000== 或 ==false #800000==，则 ==disabled #800000== 特性甚至不会被包含在渲染出来的 ==button #800000== 元素中。\n### 使用JavaScript 表达式\n在Vue中所有的数据绑定Vue都提供了完全的 JavaScripot 表达式支持。\n\n``` html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n```\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含**单个表达式**，所以下面的例子都**不会生效**\n\n``` html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n不过在正常项目开发中，并不建议在页面上做逻辑判断等的一些操作，页面仅作为数据展示的载体，逻辑处理判断的操作应在 ==script #800000== 或者 ==js #800000== 文件下进行\n\n## 指令\n指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。\n指令的职责就在于当表达式的值发生改变时，将其产生的连带影响，响应式的作用于 DOM。\n常见的指令有：v-model、v-for、v-if、v-on、v-show等\n\n### v-model\n实现双向数据绑定，实时监控数据变化，一般用于表单。\n\n``` html\n <div id=\"main\">\n    <input type=\"text\" v-model=\"content\">\n    <p> {{content}}</p>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            content: ''\n        }\n    })\n</script>\n```\n在这里，使用v-model指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。\n### v-for\n用于遍历数组、对象等。\n\n``` html\n<div id=\"main\">\n    <ul>\n        <li v-for=\"item in arr\">  //遍历数组\n            {{item}}\n        </li>\n    </ul>\n    <ul>\n        <li v-for=\"item in obj\">   //遍历对象\n            {{item}}\n        </li>\n    </ul>\n    <ul>      \n        <li v-for=\"(value,key) in obj\">   //键值循环，数组也适用，注意key在后面\n            {{key}}----{{value}}\n        </li>\n    </ul>\n</div>\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            arr: [1, 2, 3, 4, 5, 6],\n            obj: {\n                name: 'hedawei',\n                age: 30,\n                gender: 'man'\n            }\n        }\n    })\n</script>\n```\n在v-for后常需要绑定一个key值，作为独立项的依据，不写也不会影响正常页面显示\n### v-on\n用于绑定事件，用法：v-on:事件=\"函数\"。\n下面拿点击事件举例：\n\n``` html\n<div id=\"main\">\n        <button type=\"button\" v-on:click=\"showHello()\">点击显示</button>\n\t\t<p>{{msg}}</p>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            msg:'Hello World!'\n        },\n        methods: {\n            showHello() {\n                this.msg = 'Hello Vue.js';\n            }\n        }\n    })\n</script>\n```\nthis指向当前vue实例，由此可获取实例的其他属性。想了解更多事件，详情请参考[官网API](https://cn.vuejs.org/v2/api/)\n### v-show\n用来显示或隐藏元素，v-show是通过display实现。当v-show的值为true时显示，为false时隐藏。\n\n``` html\n<div id=\"main\">\n    <button type=\"button\" v-on:click=\"change()\">隐藏</button>\n    <div style=\"width:100px;height:100px;background:red\" v-show=\"flag\"></div>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            flag: true\n        },\n        methods: {\n            change() {\n                this.flag = !this.flag;\n            }\n        }\n    })\n</script>\n```\n### 修饰符\n#### v-on修饰符：\n - ==.stop #80000f==- 调用 ==event.stopPropagation()。 #800000==\n - ==.prevent #800000== - 调用 ==event.preventDefault() #800000==。\n - ==.capture #800000== - 添加事件侦听器时使用 capture 模式。\n - ==.self #800000== - 只当事件是从侦听器绑定的元素本身触发时才触发回调。\n - ==.{keyCode | keyAlias} #800000== - 只当事件是从特定键触发时才触发回调。\n - ==.native #800000== - 监听组件根元素的原生事件。\n - ==.once #800000== - 只触发一次回调。\n - ==.left #800000== - (2.2.0) 只当点击鼠标左键时触发。\n - ==.right #800000== - (2.2.0) 只当点击鼠标右键时触发。==mark text==\n - ==.middle #800000== - (2.2.0) 只当点击鼠标中键时触发。\n - ==.passive #800000== - (2.3.0) 以 =={ passive: true } #800000== 模式添加侦听器==\n 参考：\n - [事件处理器](https://cn.vuejs.org/v2/guide/events.html)\n - [组件 - 自定义时间](https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E5%90%91%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF)\n\n#### v-bind修饰符\n - ==.prop #800000== - 被用于绑定 DOM 属性 (property)。\n - ==.camel #800000== - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)\n - ==.sync #800000== (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。\n参考：\n - [Class 与 Style 绑定](https://cn.vuejs.org/v2/guide/class-and-style.html)\n - [组件 - Props](https://cn.vuejs.org/v2/guide/components.html#logo)\n - [组件- 。sync 修饰符](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n\n#### v-model修饰符\n - ==.lazy #800000== - 取代 input 监听 change 事件\n - ==.number #800000== - 输入字符串转为数字\n - ==.trim #800000== - 输入首尾空格过滤\n参考：\n - [表单控件绑定](https://cn.vuejs.org/v2/guide/forms.html)\n - [组件 - 在输入组件上使用自定义事件](https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6)\n\n### 缩写\n==v- #800000== 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，==v- #800000== 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的单页面应用程序 **==(SPA - single page application==**) 时，==v- #800000== 前缀也变得没那么重要了。因此，Vue.js 为 ==v-bind #800000== 和 ==v-on #800000== 这两个最常用的指令，提供了特定简写：\n#### ==v-bind #800000== 缩写 \" : \"。\n#### ==v-on #800000== 缩写 \" @ \"。\n\n正因为这些缩写的存在，为实际项目书写提供了很大的便利。慢慢你就能体会到他们的魅力。","source":"_posts/vue_learn(2).md","raw":"---\ntitle: Vue基础学习笔记 （二）\ntags: vue\ngrammar_cjkRuby: true\n---\n\n# Vue基础学习笔记 （二）— Vue模板语法\n## 一、插值\n### 文本\nVue中的数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值：\n``` html\n<span> Message: {{ msg }} </span>\n```\nMustache 标签将会被替代为对应数据对象上 ==msg #800000== 属性的值。无论何时，绑定的数据对象上 ==msg #800000== 属性发生了改变，插值处的内容都会更新。\n使用 ==v-once #800000== 指令，可以进行一次性插值，即当数据改变时，插值处也不会因此而更新为新值。\n除了双大括号形式可以进行数据绑定，==v-text #800000== 指令也可以进行数据的绑定\n``` html\n<span v-once> Message: {{ msg }} </span>\n```\n### 原始HTML\n双大括号和 v-text 指令的数据绑定方式都会把数据解析为普通文本，而非HTML代码，为了输出HTML代码，我们需要使用 ==v-html #800000== 指令：\n\n``` html\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n···\ndata：{\n\trawHtml:'<span style=\"color:red\">This should be red</span>'\n}\n```\nspan中的内容就会被替换成rawHtml中的内容。这时候页面就会显示一段红色This should be red的文本。\n### 特性\n==v-bind #800000==指令：\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n```\n是用于处理Mustache 语法不能作用在HTML特性上的情况，上述代码指在布尔特性下，它们的存在即暗示为 ==true #800000== , 在下面的例子中：\n\n``` html\n<button v-bind:disabled=\"isButtonDisabled\">Button</button>\n```\n如果 ==isButtonDisabled #800000== 的值是 ==null #800000==、==undefined #800000== 或 ==false #800000==，则 ==disabled #800000== 特性甚至不会被包含在渲染出来的 ==button #800000== 元素中。\n### 使用JavaScript 表达式\n在Vue中所有的数据绑定Vue都提供了完全的 JavaScripot 表达式支持。\n\n``` html\n{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div v-bind:id=\"'list-' + id\"></div>\n```\n这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含**单个表达式**，所以下面的例子都**不会生效**\n\n``` html\n<!-- 这是语句，不是表达式 -->\n{{ var a = 1 }}\n\n<!-- 流控制也不会生效，请使用三元表达式 -->\n{{ if (ok) { return message } }}\n```\n不过在正常项目开发中，并不建议在页面上做逻辑判断等的一些操作，页面仅作为数据展示的载体，逻辑处理判断的操作应在 ==script #800000== 或者 ==js #800000== 文件下进行\n\n## 指令\n指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。\n指令的职责就在于当表达式的值发生改变时，将其产生的连带影响，响应式的作用于 DOM。\n常见的指令有：v-model、v-for、v-if、v-on、v-show等\n\n### v-model\n实现双向数据绑定，实时监控数据变化，一般用于表单。\n\n``` html\n <div id=\"main\">\n    <input type=\"text\" v-model=\"content\">\n    <p> {{content}}</p>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            content: ''\n        }\n    })\n</script>\n```\n在这里，使用v-model指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。\n### v-for\n用于遍历数组、对象等。\n\n``` html\n<div id=\"main\">\n    <ul>\n        <li v-for=\"item in arr\">  //遍历数组\n            {{item}}\n        </li>\n    </ul>\n    <ul>\n        <li v-for=\"item in obj\">   //遍历对象\n            {{item}}\n        </li>\n    </ul>\n    <ul>      \n        <li v-for=\"(value,key) in obj\">   //键值循环，数组也适用，注意key在后面\n            {{key}}----{{value}}\n        </li>\n    </ul>\n</div>\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            arr: [1, 2, 3, 4, 5, 6],\n            obj: {\n                name: 'hedawei',\n                age: 30,\n                gender: 'man'\n            }\n        }\n    })\n</script>\n```\n在v-for后常需要绑定一个key值，作为独立项的依据，不写也不会影响正常页面显示\n### v-on\n用于绑定事件，用法：v-on:事件=\"函数\"。\n下面拿点击事件举例：\n\n``` html\n<div id=\"main\">\n        <button type=\"button\" v-on:click=\"showHello()\">点击显示</button>\n\t\t<p>{{msg}}</p>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            msg:'Hello World!'\n        },\n        methods: {\n            showHello() {\n                this.msg = 'Hello Vue.js';\n            }\n        }\n    })\n</script>\n```\nthis指向当前vue实例，由此可获取实例的其他属性。想了解更多事件，详情请参考[官网API](https://cn.vuejs.org/v2/api/)\n### v-show\n用来显示或隐藏元素，v-show是通过display实现。当v-show的值为true时显示，为false时隐藏。\n\n``` html\n<div id=\"main\">\n    <button type=\"button\" v-on:click=\"change()\">隐藏</button>\n    <div style=\"width:100px;height:100px;background:red\" v-show=\"flag\"></div>\n</div>\n\n<script src=\"./js/vue.js\"></script>\n<script>\n    new Vue({\n        el: '#main',\n        data: {\n            flag: true\n        },\n        methods: {\n            change() {\n                this.flag = !this.flag;\n            }\n        }\n    })\n</script>\n```\n### 修饰符\n#### v-on修饰符：\n - ==.stop #80000f==- 调用 ==event.stopPropagation()。 #800000==\n - ==.prevent #800000== - 调用 ==event.preventDefault() #800000==。\n - ==.capture #800000== - 添加事件侦听器时使用 capture 模式。\n - ==.self #800000== - 只当事件是从侦听器绑定的元素本身触发时才触发回调。\n - ==.{keyCode | keyAlias} #800000== - 只当事件是从特定键触发时才触发回调。\n - ==.native #800000== - 监听组件根元素的原生事件。\n - ==.once #800000== - 只触发一次回调。\n - ==.left #800000== - (2.2.0) 只当点击鼠标左键时触发。\n - ==.right #800000== - (2.2.0) 只当点击鼠标右键时触发。==mark text==\n - ==.middle #800000== - (2.2.0) 只当点击鼠标中键时触发。\n - ==.passive #800000== - (2.3.0) 以 =={ passive: true } #800000== 模式添加侦听器==\n 参考：\n - [事件处理器](https://cn.vuejs.org/v2/guide/events.html)\n - [组件 - 自定义时间](https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E5%90%91%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF)\n\n#### v-bind修饰符\n - ==.prop #800000== - 被用于绑定 DOM 属性 (property)。\n - ==.camel #800000== - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)\n - ==.sync #800000== (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。\n参考：\n - [Class 与 Style 绑定](https://cn.vuejs.org/v2/guide/class-and-style.html)\n - [组件 - Props](https://cn.vuejs.org/v2/guide/components.html#logo)\n - [组件- 。sync 修饰符](https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6)\n\n#### v-model修饰符\n - ==.lazy #800000== - 取代 input 监听 change 事件\n - ==.number #800000== - 输入字符串转为数字\n - ==.trim #800000== - 输入首尾空格过滤\n参考：\n - [表单控件绑定](https://cn.vuejs.org/v2/guide/forms.html)\n - [组件 - 在输入组件上使用自定义事件](https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6)\n\n### 缩写\n==v- #800000== 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，==v- #800000== 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的单页面应用程序 **==(SPA - single page application==**) 时，==v- #800000== 前缀也变得没那么重要了。因此，Vue.js 为 ==v-bind #800000== 和 ==v-on #800000== 这两个最常用的指令，提供了特定简写：\n#### ==v-bind #800000== 缩写 \" : \"。\n#### ==v-on #800000== 缩写 \" @ \"。\n\n正因为这些缩写的存在，为实际项目书写提供了很大的便利。慢慢你就能体会到他们的魅力。","slug":"vue_learn(2)","published":1,"date":"2018-07-25T03:57:08.971Z","updated":"2018-07-24T20:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjk0mkluw0000l8tzzzpxudph","content":"<h1 id=\"Vue基础学习笔记-（二）—-Vue模板语法\"><a href=\"#Vue基础学习笔记-（二）—-Vue模板语法\" class=\"headerlink\" title=\"Vue基础学习笔记 （二）— Vue模板语法\"></a>Vue基础学习笔记 （二）— Vue模板语法</h1><h2 id=\"一、插值\"><a href=\"#一、插值\" class=\"headerlink\" title=\"一、插值\"></a>一、插值</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>Vue中的数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Message: &#123;&#123; msg &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Mustache 标签将会被替代为对应数据对象上 ==msg #800000== 属性的值。无论何时，绑定的数据对象上 ==msg #800000== 属性发生了改变，插值处的内容都会更新。<br>使用 ==v-once #800000== 指令，可以进行一次性插值，即当数据改变时，插值处也不会因此而更新为新值。<br>除了双大括号形式可以进行数据绑定，==v-text #800000== 指令也可以进行数据的绑定<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span> Message: &#123;&#123; msg &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原始HTML\"><a href=\"#原始HTML\" class=\"headerlink\" title=\"原始HTML\"></a>原始HTML</h3><p>双大括号和 v-text 指令的数据绑定方式都会把数据解析为普通文本，而非HTML代码，为了输出HTML代码，我们需要使用 ==v-html #800000== 指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">data：&#123;</span><br><span class=\"line\">\trawHtml:'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>This should be red<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>span中的内容就会被替换成rawHtml中的内容。这时候页面就会显示一段红色This should be red的文本。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>==v-bind #800000==指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>是用于处理Mustache 语法不能作用在HTML特性上的情况，上述代码指在布尔特性下，它们的存在即暗示为 ==true #800000== , 在下面的例子中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"isButtonDisabled\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果 ==isButtonDisabled #800000== 的值是 ==null #800000==、==undefined #800000== 或 ==false #800000==，则 ==disabled #800000== 特性甚至不会被包含在渲染出来的 ==button #800000== 元素中。</p>\n<h3 id=\"使用JavaScript-表达式\"><a href=\"#使用JavaScript-表达式\" class=\"headerlink\" title=\"使用JavaScript 表达式\"></a>使用JavaScript 表达式</h3><p>在Vue中所有的数据绑定Vue都提供了完全的 JavaScripot 表达式支持。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会生效</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在正常项目开发中，并不建议在页面上做逻辑判断等的一些操作，页面仅作为数据展示的载体，逻辑处理判断的操作应在 ==script #800000== 或者 ==js #800000== 文件下进行</p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。<br>指令的职责就在于当表达式的值发生改变时，将其产生的连带影响，响应式的作用于 DOM。<br>常见的指令有：v-model、v-for、v-if、v-on、v-show等</p>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><p>实现双向数据绑定，实时监控数据变化，一般用于表单。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> &#123;&#123;content&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            content: ''</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里，使用v-model指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>用于遍历数组、对象等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in arr\"</span>&gt;</span>  //遍历数组</span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in obj\"</span>&gt;</span>   //遍历对象</span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>      </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value,key) in obj\"</span>&gt;</span>   //键值循环，数组也适用，注意key在后面</span><br><span class=\"line\">            &#123;&#123;key&#125;&#125;----&#123;&#123;value&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            arr: [1, 2, 3, 4, 5, 6],</span></span><br><span class=\"line\"><span class=\"undefined\">            obj: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                name: 'hedawei',</span></span><br><span class=\"line\"><span class=\"undefined\">                age: 30,</span></span><br><span class=\"line\"><span class=\"undefined\">                gender: 'man'</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在v-for后常需要绑定一个key值，作为独立项的依据，不写也不会影响正常页面显示</p>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><p>用于绑定事件，用法：v-on:事件=”函数”。<br>下面拿点击事件举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"showHello()\"</span>&gt;</span>点击显示<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            msg:'Hello World!'</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            showHello() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                this.msg = 'Hello Vue.js';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>this指向当前vue实例，由此可获取实例的其他属性。想了解更多事件，详情请参考<a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"noopener\">官网API</a></p>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><p>用来显示或隐藏元素，v-show是通过display实现。当v-show的值为true时显示，为false时隐藏。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"change()\"</span>&gt;</span>隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background:red\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"flag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            flag: true</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            change() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                this.flag = !this.flag;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><h4 id=\"v-on修饰符：\"><a href=\"#v-on修饰符：\" class=\"headerlink\" title=\"v-on修饰符：\"></a>v-on修饰符：</h4><ul>\n<li>==.stop #80000f==- 调用 ==event.stopPropagation()。 #800000==</li>\n<li>==.prevent #800000== - 调用 ==event.preventDefault() #800000==。</li>\n<li>==.capture #800000== - 添加事件侦听器时使用 capture 模式。</li>\n<li>==.self #800000== - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>\n<li>==.{keyCode | keyAlias} #800000== - 只当事件是从特定键触发时才触发回调。</li>\n<li>==.native #800000== - 监听组件根元素的原生事件。</li>\n<li>==.once #800000== - 只触发一次回调。</li>\n<li>==.left #800000== - (2.2.0) 只当点击鼠标左键时触发。</li>\n<li>==.right #800000== - (2.2.0) 只当点击鼠标右键时触发。==mark text==</li>\n<li>==.middle #800000== - (2.2.0) 只当点击鼠标中键时触发。</li>\n<li>==.passive #800000== - (2.3.0) 以 =={ passive: true } #800000== 模式添加侦听器==<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/events.html\" target=\"_blank\" rel=\"noopener\">事件处理器</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E5%90%91%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">组件 - 自定义时间</a></li>\n</ul>\n<h4 id=\"v-bind修饰符\"><a href=\"#v-bind修饰符\" class=\"headerlink\" title=\"v-bind修饰符\"></a>v-bind修饰符</h4><ul>\n<li>==.prop #800000== - 被用于绑定 DOM 属性 (property)。</li>\n<li>==.camel #800000== - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)</li>\n<li>==.sync #800000== (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/class-and-style.html\" target=\"_blank\" rel=\"noopener\">Class 与 Style 绑定</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#logo\" target=\"_blank\" rel=\"noopener\">组件 - Props</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">组件- 。sync 修饰符</a></li>\n</ul>\n<h4 id=\"v-model修饰符\"><a href=\"#v-model修饰符\" class=\"headerlink\" title=\"v-model修饰符\"></a>v-model修饰符</h4><ul>\n<li>==.lazy #800000== - 取代 input 监听 change 事件</li>\n<li>==.number #800000== - 输入字符串转为数字</li>\n<li>==.trim #800000== - 输入首尾空格过滤<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">表单控件绑定</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">组件 - 在输入组件上使用自定义事件</a></li>\n</ul>\n<h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><p>==v- #800000== 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，==v- #800000== 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的单页面应用程序 <strong>==(SPA - single page application==</strong>) 时，==v- #800000== 前缀也变得没那么重要了。因此，Vue.js 为 ==v-bind #800000== 和 ==v-on #800000== 这两个最常用的指令，提供了特定简写：</p>\n<h4 id=\"v-bind-800000-缩写-“-“。\"><a href=\"#v-bind-800000-缩写-“-“。\" class=\"headerlink\" title=\"==v-bind #800000== 缩写 “ : “。\"></a>==v-bind #800000== 缩写 “ : “。</h4><h4 id=\"v-on-800000-缩写-“-“。\"><a href=\"#v-on-800000-缩写-“-“。\" class=\"headerlink\" title=\"==v-on #800000== 缩写 “ @ “。\"></a>==v-on #800000== 缩写 “ @ “。</h4><p>正因为这些缩写的存在，为实际项目书写提供了很大的便利。慢慢你就能体会到他们的魅力。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue基础学习笔记-（二）—-Vue模板语法\"><a href=\"#Vue基础学习笔记-（二）—-Vue模板语法\" class=\"headerlink\" title=\"Vue基础学习笔记 （二）— Vue模板语法\"></a>Vue基础学习笔记 （二）— Vue模板语法</h1><h2 id=\"一、插值\"><a href=\"#一、插值\" class=\"headerlink\" title=\"一、插值\"></a>一、插值</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>Vue中的数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span> Message: &#123;&#123; msg &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>Mustache 标签将会被替代为对应数据对象上 ==msg #800000== 属性的值。无论何时，绑定的数据对象上 ==msg #800000== 属性发生了改变，插值处的内容都会更新。<br>使用 ==v-once #800000== 指令，可以进行一次性插值，即当数据改变时，插值处也不会因此而更新为新值。<br>除了双大括号形式可以进行数据绑定，==v-text #800000== 指令也可以进行数据的绑定<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-once</span>&gt;</span> Message: &#123;&#123; msg &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原始HTML\"><a href=\"#原始HTML\" class=\"headerlink\" title=\"原始HTML\"></a>原始HTML</h3><p>双大括号和 v-text 指令的数据绑定方式都会把数据解析为普通文本，而非HTML代码，为了输出HTML代码，我们需要使用 ==v-html #800000== 指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Using v-html directive: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"rawHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">···</span><br><span class=\"line\">data：&#123;</span><br><span class=\"line\">\trawHtml:'<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">\"color:red\"</span>&gt;</span>This should be red<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>span中的内容就会被替换成rawHtml中的内容。这时候页面就会显示一段红色This should be red的文本。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>==v-bind #800000==指令：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"dynamicId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>是用于处理Mustache 语法不能作用在HTML特性上的情况，上述代码指在布尔特性下，它们的存在即暗示为 ==true #800000== , 在下面的例子中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-bind:disabled</span>=<span class=\"string\">\"isButtonDisabled\"</span>&gt;</span>Button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果 ==isButtonDisabled #800000== 的值是 ==null #800000==、==undefined #800000== 或 ==false #800000==，则 ==disabled #800000== 特性甚至不会被包含在渲染出来的 ==button #800000== 元素中。</p>\n<h3 id=\"使用JavaScript-表达式\"><a href=\"#使用JavaScript-表达式\" class=\"headerlink\" title=\"使用JavaScript 表达式\"></a>使用JavaScript 表达式</h3><p>在Vue中所有的数据绑定Vue都提供了完全的 JavaScripot 表达式支持。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; number + 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list-' + id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会生效</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class=\"line\">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在正常项目开发中，并不建议在页面上做逻辑判断等的一些操作，页面仅作为数据展示的载体，逻辑处理判断的操作应在 ==script #800000== 或者 ==js #800000== 文件下进行</p>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。<br>指令的职责就在于当表达式的值发生改变时，将其产生的连带影响，响应式的作用于 DOM。<br>常见的指令有：v-model、v-for、v-if、v-on、v-show等</p>\n<h3 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h3><p>实现双向数据绑定，实时监控数据变化，一般用于表单。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> &#123;&#123;content&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            content: ''</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里，使用v-model指令将输入框的值与vue实例中的content进行绑定。此后，二者中的任一值发生变化，另一个值都会跟随变化。</p>\n<h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>用于遍历数组、对象等。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in arr\"</span>&gt;</span>  //遍历数组</span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in obj\"</span>&gt;</span>   //遍历对象</span><br><span class=\"line\">            &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>      </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value,key) in obj\"</span>&gt;</span>   //键值循环，数组也适用，注意key在后面</span><br><span class=\"line\">            &#123;&#123;key&#125;&#125;----&#123;&#123;value&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            arr: [1, 2, 3, 4, 5, 6],</span></span><br><span class=\"line\"><span class=\"undefined\">            obj: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                name: 'hedawei',</span></span><br><span class=\"line\"><span class=\"undefined\">                age: 30,</span></span><br><span class=\"line\"><span class=\"undefined\">                gender: 'man'</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在v-for后常需要绑定一个key值，作为独立项的依据，不写也不会影响正常页面显示</p>\n<h3 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h3><p>用于绑定事件，用法：v-on:事件=”函数”。<br>下面拿点击事件举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"showHello()\"</span>&gt;</span>点击显示<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            msg:'Hello World!'</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            showHello() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                this.msg = 'Hello Vue.js';</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>this指向当前vue实例，由此可获取实例的其他属性。想了解更多事件，详情请参考<a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"noopener\">官网API</a></p>\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><p>用来显示或隐藏元素，v-show是通过display实现。当v-show的值为true时显示，为false时隐藏。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"change()\"</span>&gt;</span>隐藏<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100px;height:100px;background:red\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"flag\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    new Vue(&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        el: '#main',</span></span><br><span class=\"line\"><span class=\"undefined\">        data: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            flag: true</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">        methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">            change() &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                this.flag = !this.flag;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><h4 id=\"v-on修饰符：\"><a href=\"#v-on修饰符：\" class=\"headerlink\" title=\"v-on修饰符：\"></a>v-on修饰符：</h4><ul>\n<li>==.stop #80000f==- 调用 ==event.stopPropagation()。 #800000==</li>\n<li>==.prevent #800000== - 调用 ==event.preventDefault() #800000==。</li>\n<li>==.capture #800000== - 添加事件侦听器时使用 capture 模式。</li>\n<li>==.self #800000== - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>\n<li>==.{keyCode | keyAlias} #800000== - 只当事件是从特定键触发时才触发回调。</li>\n<li>==.native #800000== - 监听组件根元素的原生事件。</li>\n<li>==.once #800000== - 只触发一次回调。</li>\n<li>==.left #800000== - (2.2.0) 只当点击鼠标左键时触发。</li>\n<li>==.right #800000== - (2.2.0) 只当点击鼠标右键时触发。==mark text==</li>\n<li>==.middle #800000== - (2.2.0) 只当点击鼠标中键时触发。</li>\n<li>==.passive #800000== - (2.3.0) 以 =={ passive: true } #800000== 模式添加侦听器==<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/events.html\" target=\"_blank\" rel=\"noopener\">事件处理器</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E5%90%91%E7%88%B6%E7%BA%A7%E7%BB%84%E4%BB%B6%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\" target=\"_blank\" rel=\"noopener\">组件 - 自定义时间</a></li>\n</ul>\n<h4 id=\"v-bind修饰符\"><a href=\"#v-bind修饰符\" class=\"headerlink\" title=\"v-bind修饰符\"></a>v-bind修饰符</h4><ul>\n<li>==.prop #800000== - 被用于绑定 DOM 属性 (property)。</li>\n<li>==.camel #800000== - (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)</li>\n<li>==.sync #800000== (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/class-and-style.html\" target=\"_blank\" rel=\"noopener\">Class 与 Style 绑定</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components.html#logo\" target=\"_blank\" rel=\"noopener\">组件 - Props</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">组件- 。sync 修饰符</a></li>\n</ul>\n<h4 id=\"v-model修饰符\"><a href=\"#v-model修饰符\" class=\"headerlink\" title=\"v-model修饰符\"></a>v-model修饰符</h4><ul>\n<li>==.lazy #800000== - 取代 input 监听 change 事件</li>\n<li>==.number #800000== - 输入字符串转为数字</li>\n<li>==.trim #800000== - 输入首尾空格过滤<br>参考：</li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/forms.html\" target=\"_blank\" rel=\"noopener\">表单控件绑定</a></li>\n<li><a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">组件 - 在输入组件上使用自定义事件</a></li>\n</ul>\n<h3 id=\"缩写\"><a href=\"#缩写\" class=\"headerlink\" title=\"缩写\"></a>缩写</h3><p>==v- #800000== 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，==v- #800000== 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue.js 管理所有模板的单页面应用程序 <strong>==(SPA - single page application==</strong>) 时，==v- #800000== 前缀也变得没那么重要了。因此，Vue.js 为 ==v-bind #800000== 和 ==v-on #800000== 这两个最常用的指令，提供了特定简写：</p>\n<h4 id=\"v-bind-800000-缩写-“-“。\"><a href=\"#v-bind-800000-缩写-“-“。\" class=\"headerlink\" title=\"==v-bind #800000== 缩写 “ : “。\"></a>==v-bind #800000== 缩写 “ : “。</h4><h4 id=\"v-on-800000-缩写-“-“。\"><a href=\"#v-on-800000-缩写-“-“。\" class=\"headerlink\" title=\"==v-on #800000== 缩写 “ @ “。\"></a>==v-on #800000== 缩写 “ @ “。</h4><p>正因为这些缩写的存在，为实际项目书写提供了很大的便利。慢慢你就能体会到他们的魅力。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjk0mi5gs0000agtz1pg1w4hc","tag_id":"cjk0mi5gz0002agtz2t3gvi5u","_id":"cjk0mi5h20004agtzpvzvy5fy"},{"post_id":"cjk0mi5gx0001agtzijvt7es1","tag_id":"cjk0mi5h10003agtzm1yrpev8","_id":"cjk0mi5h30005agtze6n715xx"},{"post_id":"cjk0mkluw0000l8tzzzpxudph","tag_id":"cjk0mklv20001l8tzm9hfakqo","_id":"cjk0mklv50002l8tzn9y6b2m5"}],"Tag":[{"name":"JS,DOM","_id":"cjk0mi5gz0002agtz2t3gvi5u"},{"name":"Vue","_id":"cjk0mi5h10003agtzm1yrpev8"},{"name":"vue","_id":"cjk0mklv20001l8tzm9hfakqo"}]}}